//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MitchellClaimDataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MitchellClaimDBEntities : DbContext
    {
        public MitchellClaimDBEntities()
            : base("name=MitchellClaimDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<MitchellClaimType> MitchellClaimTypes { get; set; }
        public virtual DbSet<VehicleInfoType> VehicleInfoTypes { get; set; }
        public virtual DbSet<LossInfoType> LossInfoTypes { get; set; }
    
        public virtual int CreateMitchellClaim(string claimNumber, string firstName, string lastName, string status, Nullable<System.DateTime> lossDate, Nullable<long> adjusterId, Nullable<bool> lossDetails, string lossCause, Nullable<System.DateTime> reportedDate, string description)
        {
            var claimNumberParameter = claimNumber != null ?
                new ObjectParameter("claimNumber", claimNumber) :
                new ObjectParameter("claimNumber", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var lossDateParameter = lossDate.HasValue ?
                new ObjectParameter("lossDate", lossDate) :
                new ObjectParameter("lossDate", typeof(System.DateTime));
    
            var adjusterIdParameter = adjusterId.HasValue ?
                new ObjectParameter("adjusterId", adjusterId) :
                new ObjectParameter("adjusterId", typeof(long));
    
            var lossDetailsParameter = lossDetails.HasValue ?
                new ObjectParameter("lossDetails", lossDetails) :
                new ObjectParameter("lossDetails", typeof(bool));
    
            var lossCauseParameter = lossCause != null ?
                new ObjectParameter("lossCause", lossCause) :
                new ObjectParameter("lossCause", typeof(string));
    
            var reportedDateParameter = reportedDate.HasValue ?
                new ObjectParameter("reportedDate", reportedDate) :
                new ObjectParameter("reportedDate", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateMitchellClaim", claimNumberParameter, firstNameParameter, lastNameParameter, statusParameter, lossDateParameter, adjusterIdParameter, lossDetailsParameter, lossCauseParameter, reportedDateParameter, descriptionParameter);
        }
    
        public virtual int DeleteMitchellClaim(string claimNumber)
        {
            var claimNumberParameter = claimNumber != null ?
                new ObjectParameter("claimNumber", claimNumber) :
                new ObjectParameter("claimNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteMitchellClaim", claimNumberParameter);
        }
    
        public virtual ObjectResult<GetMitchellClaim_Result> GetMitchellClaim(string claimNumber)
        {
            var claimNumberParameter = claimNumber != null ?
                new ObjectParameter("claimNumber", claimNumber) :
                new ObjectParameter("claimNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMitchellClaim_Result>("GetMitchellClaim", claimNumberParameter);
        }
    
        public virtual ObjectResult<string> GetMitchellClaimList(Nullable<System.DateTime> lossFromDate, Nullable<System.DateTime> lossToDate)
        {
            var lossFromDateParameter = lossFromDate.HasValue ?
                new ObjectParameter("lossFromDate", lossFromDate) :
                new ObjectParameter("lossFromDate", typeof(System.DateTime));
    
            var lossToDateParameter = lossToDate.HasValue ?
                new ObjectParameter("lossToDate", lossToDate) :
                new ObjectParameter("lossToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetMitchellClaimList", lossFromDateParameter, lossToDateParameter);
        }
    
        public virtual ObjectResult<GetVehicleClaim_Result> GetVehicleClaim(string claimNumber, Nullable<int> modelYear)
        {
            var claimNumberParameter = claimNumber != null ?
                new ObjectParameter("claimNumber", claimNumber) :
                new ObjectParameter("claimNumber", typeof(string));
    
            var modelYearParameter = modelYear.HasValue ?
                new ObjectParameter("modelYear", modelYear) :
                new ObjectParameter("modelYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVehicleClaim_Result>("GetVehicleClaim", claimNumberParameter, modelYearParameter);
        }
    }
}
